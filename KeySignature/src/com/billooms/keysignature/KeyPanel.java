package com.billooms.keysignature;

import static com.billooms.keysignature.Scale.*;
import com.billooms.notes.Note;
import com.billooms.notes.NotePlayer;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import javax.swing.JPanel;

/**
 * Panel for selecting and editing a key signature.
 *
 * @author Bill Ooms. Copyright 2016 Studio of Bill Ooms. All rights reserved.
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */
public class KeyPanel extends JPanel implements PropertyChangeListener {

  /** Key. */
  private Key key;
  /** Note player. */
  private NotePlayer player;

  /** Creates new form KeyPanel */
  public KeyPanel() {
    initComponents();
  }

  /**
   * Initialize the panel (required so that we can drag and drop this).
   * 
   * @param player NotePlayer
   */
  public void initialize(NotePlayer player) {
    this.player = player;
    key = new Key();    // default is C major
    keyCombo.removeAllItems();
    for (KeySignature k : KeySignature.values()) {
      keyCombo.addItem(k.getText());
    }
    keyCombo.setSelectedIndex(KeySignature.NONE.ordinal());
    
    scaleCombo.removeAllItems();
    for (Scale s : Scale.values()) {
      scaleCombo.addItem(s.name());
    }
    scaleCombo.setSelectedItem(MAJOR);

    updateForm();
    key.addPropertyChangeListener(this);
  }

  /**
   * Update all fields on the form from key signature data.
   */
  private void updateForm() {
    if (key.getKeySignature() != null) {
      scaleCombo.setSelectedItem(key.getScale());
      keyCombo.setSelectedIndex(key.getKeySignature().ordinal());
      keyPicture.setIcon(key.getKeySignature().getIcon());
      keyLabel.setText(key.toString());
      scaleLabel.setText(key.getNotes().toString());
    }
  }

  /**
   * Get the key that this panel is controlling.
   *
   * @return key
   */
  public Key getKey() {
    return key;
  }
  
  /**
   * Play the current scale.
   */
  private void playScale() {
    ArrayList<Note> notes = key.getNotes();
    ArrayList<Note> notes2 = new ArrayList<>();
    for (Note note : notes) {
      notes2.add(new Note(note.getNumber() + 12));   // add a 2nd octave
    }
    for (Note note : notes) {
      notes2.add(new Note(note.getNumber() + 24));   // add a 3rd octave
    }
    notes2.add(new Note(notes.get(0).getNumber() + 36));  // and repeat the tonic
    notes.addAll(notes2);
    player.play(notes);
  }

  @Override
  public void propertyChange(PropertyChangeEvent evt) {
//    System.out.println("KeyPanel.propertyChange:" + evt.getPropertyName() + ", " + evt.getOldValue() + ", " + evt.getNewValue());
    updateForm();
  }

  /** This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    keyCombo = new javax.swing.JComboBox<>();
    keyPicture = new javax.swing.JLabel();
    keyLabel = new javax.swing.JLabel();
    scaleCombo = new javax.swing.JComboBox<>();
    playButton = new javax.swing.JButton();
    scaleLabel = new javax.swing.JLabel();

    setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
    setToolTipText(org.openide.util.NbBundle.getMessage(KeyPanel.class, "KeyPanel.toolTipText")); // NOI18N

    keyCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
    keyCombo.setToolTipText(org.openide.util.NbBundle.getMessage(KeyPanel.class, "KeyPanel.keyCombo.toolTipText")); // NOI18N
    keyCombo.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        changeKey(evt);
      }
    });

    keyPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/billooms/keysignature/icons/keyC.png"))); // NOI18N
    org.openide.awt.Mnemonics.setLocalizedText(keyPicture, org.openide.util.NbBundle.getMessage(KeyPanel.class, "KeyPanel.keyPicture.text")); // NOI18N
    keyPicture.setToolTipText(org.openide.util.NbBundle.getMessage(KeyPanel.class, "KeyPanel.keyPicture.toolTipText")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(keyLabel, org.openide.util.NbBundle.getMessage(KeyPanel.class, "KeyPanel.keyLabel.text")); // NOI18N
    keyLabel.setToolTipText(org.openide.util.NbBundle.getMessage(KeyPanel.class, "KeyPanel.keyLabel.toolTipText")); // NOI18N

    scaleCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
    scaleCombo.setToolTipText(org.openide.util.NbBundle.getMessage(KeyPanel.class, "KeyPanel.scaleCombo.toolTipText")); // NOI18N
    scaleCombo.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        scaleComboActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(playButton, org.openide.util.NbBundle.getMessage(KeyPanel.class, "KeyPanel.playButton.text")); // NOI18N
    playButton.setToolTipText(org.openide.util.NbBundle.getMessage(KeyPanel.class, "KeyPanel.playButton.toolTipText")); // NOI18N
    playButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        playButtonActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(scaleLabel, org.openide.util.NbBundle.getMessage(KeyPanel.class, "KeyPanel.scaleLabel.text")); // NOI18N
    scaleLabel.setToolTipText(org.openide.util.NbBundle.getMessage(KeyPanel.class, "KeyPanel.scaleLabel.toolTipText")); // NOI18N

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addGroup(layout.createSequentialGroup()
            .addComponent(playButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(scaleLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(keyCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(scaleCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(keyPicture)
              .addComponent(keyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(keyPicture)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(keyLabel))
          .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(keyCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(scaleCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(playButton)
          .addComponent(scaleLabel))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void changeKey(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeKey
    if (keyCombo.isFocusOwner()) {
      key.setKeySignature(KeySignature.values()[keyCombo.getSelectedIndex()]);
      // fires a propertyChange which will update the form
    }
  }//GEN-LAST:event_changeKey

  private void scaleComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scaleComboActionPerformed
    if (scaleCombo.isFocusOwner()) {
      key.setScale(Scale.values()[scaleCombo.getSelectedIndex()]);
      // fires a propertyChange which will update the form
    }
  }//GEN-LAST:event_scaleComboActionPerformed

  private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
    if (playButton.isFocusOwner()) {
      playScale();
    }
  }//GEN-LAST:event_playButtonActionPerformed


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JComboBox<String> keyCombo;
  private javax.swing.JLabel keyLabel;
  private javax.swing.JLabel keyPicture;
  private javax.swing.JButton playButton;
  private javax.swing.JComboBox<String> scaleCombo;
  private javax.swing.JLabel scaleLabel;
  // End of variables declaration//GEN-END:variables
}
