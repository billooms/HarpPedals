package com.billooms.chords;

import com.billooms.notes.BasicNote;
import com.billooms.notes.Note;
import com.billooms.notes.NotePlayer;
import com.billooms.notes.SharpFlat;
import javax.swing.JPanel;

/**
 * Chord panel to modify and play a chord.
 *
 * @author Bill Ooms. Copyright 2016 Studio of Bill Ooms. All rights reserved.
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */
public class ChordPanel extends JPanel {
  
  /** Root note of chord. */
  private Note root;
  /** Chord being edited. */
  private Chord chord;
  /** Note player. */
  private NotePlayer player;

  /** Creates new form ChordPanel */
  public ChordPanel() {
    initComponents();
  }

  /**
   * Initialize the panel (required so that we can drag and drop this).
   * 
   * @param player NotePlayer
   */
  public void initialize(NotePlayer player) {
    this.player = player;
    chord = new Chord();
    
    rootCombo.removeAllItems();
    for (BasicNote n : BasicNote.values()) {
      rootCombo.addItem(n.toString());
    }
    rootCombo.setSelectedIndex(BasicNote.C.ordinal());
    
    sharpFlatCombo.removeAllItems();
    for (int i = 0; i < 3; i++) {   // only use the first 3 or you'll get DOUBLESHARP
      sharpFlatCombo.addItem(SharpFlat.values()[i].getSuffix());
    }
    sharpFlatCombo.setSelectedIndex(SharpFlat.NATURAL.ordinal());
    
    triadCombo.removeAllItems();
    for (Triad t : Triad.values()) {
      triadCombo.addItem(t.getName());
    }
    for (Seventh s : Seventh.values()) {
      triadCombo.addItem(s.getName());
    }
    for (Ninth n : Ninth.values()) {
      triadCombo.addItem(n.getName());
    }
    triadCombo.setSelectedIndex(Triad.MAJOR.ordinal());

    updateForm();
  }
  
  private void updateForm() {
    root = new Note(BasicNote.values()[rootCombo.getSelectedIndex()], SharpFlat.values()[sharpFlatCombo.getSelectedIndex()]);
    String c = root.toString2();
    int idx = triadCombo.getSelectedIndex();
    if (idx < Triad.SIZE) {   // for Triads
      c = c + Triad.values()[idx].getAbbreviation2();
      chord = new Chord(Triad.values()[idx]);
    } else if (idx < (Triad.SIZE + Seventh.SIZE)) {   // for Sevenths
      c = c + Seventh.values()[idx - Triad.SIZE].getAbbreviation();
      chord = new Chord(Seventh.values()[idx - Triad.SIZE]);
    } else {    // for Ninths
      c = c + Ninth.values()[idx - (Triad.SIZE + Seventh.SIZE)].getAbbreviation();
      chord = new Chord(Ninth.values()[idx - (Triad.SIZE + Seventh.SIZE)]);
    }
    if (add2Button.isSelected()) {      // add2 if needed
      chord.addInterval(Interval.MAJ2);
    }
    if (add4Button.isSelected()) {      // add4 if needed
      chord.addInterval(Interval.P4);
    }
    if (sus4Button.isSelected()) {      // add sus4 if needed
      chord.addInterval(Interval.P4);
      chord.deleteInterval(Interval.MAJ3);  // delete any 3rd in the chord
      chord.deleteInterval(Interval.MIN3);
    }
    if (add6Button.isSelected()) {      // add 6th if needed
      chord.addInterval(Interval.MAJ6);
    }
    chordLabel.setText(c);
    String notes = "";
    for (Note n : chord.getNotes(root)) {   // notes in the chord
      notes = notes + n.toString2() + " ";
    }
    notesLabel.setText(notes);
  }
  
  /**
   * Get the chord.
   * 
   * @return chord
   */
  public Chord getChord() {
    return chord;
  }
  
  /**
   * Get the root note of the chord.
   * 
   * @return root note
   */
  public Note getRootNote() {
    return new Note(BasicNote.values()[rootCombo.getSelectedIndex()], 
        SharpFlat.values()[sharpFlatCombo.getSelectedIndex()]);
  }

  /** This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    rootCombo = new javax.swing.JComboBox<>();
    sharpFlatCombo = new javax.swing.JComboBox<>();
    triadCombo = new javax.swing.JComboBox<>();
    chordLabel = new javax.swing.JLabel();
    add2Button = new javax.swing.JRadioButton();
    add4Button = new javax.swing.JRadioButton();
    sus4Button = new javax.swing.JRadioButton();
    add6Button = new javax.swing.JRadioButton();
    playButton = new javax.swing.JButton();
    notesLabel = new javax.swing.JLabel();

    setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
    setToolTipText(org.openide.util.NbBundle.getMessage(ChordPanel.class, "ChordPanel.toolTipText")); // NOI18N

    rootCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
    rootCombo.setToolTipText(org.openide.util.NbBundle.getMessage(ChordPanel.class, "ChordPanel.rootCombo.toolTipText")); // NOI18N
    rootCombo.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        rootComboActionPerformed(evt);
      }
    });

    sharpFlatCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
    sharpFlatCombo.setToolTipText(org.openide.util.NbBundle.getMessage(ChordPanel.class, "ChordPanel.sharpFlatCombo.toolTipText")); // NOI18N
    sharpFlatCombo.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        sharpFlatComboActionPerformed(evt);
      }
    });

    triadCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
    triadCombo.setToolTipText(org.openide.util.NbBundle.getMessage(ChordPanel.class, "ChordPanel.triadCombo.toolTipText")); // NOI18N
    triadCombo.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        triadComboActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(chordLabel, org.openide.util.NbBundle.getMessage(ChordPanel.class, "ChordPanel.chordLabel.text")); // NOI18N
    chordLabel.setToolTipText(org.openide.util.NbBundle.getMessage(ChordPanel.class, "ChordPanel.chordLabel.toolTipText")); // NOI18N

    org.openide.awt.Mnemonics.setLocalizedText(add2Button, org.openide.util.NbBundle.getMessage(ChordPanel.class, "ChordPanel.add2Button.text")); // NOI18N
    add2Button.setToolTipText(org.openide.util.NbBundle.getMessage(ChordPanel.class, "ChordPanel.add2Button.toolTipText")); // NOI18N
    add2Button.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        add2ButtonActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(add4Button, org.openide.util.NbBundle.getMessage(ChordPanel.class, "ChordPanel.add4Button.text")); // NOI18N
    add4Button.setToolTipText(org.openide.util.NbBundle.getMessage(ChordPanel.class, "ChordPanel.add4Button.toolTipText")); // NOI18N
    add4Button.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        add4ButtonActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(sus4Button, org.openide.util.NbBundle.getMessage(ChordPanel.class, "ChordPanel.sus4Button.text")); // NOI18N
    sus4Button.setToolTipText(org.openide.util.NbBundle.getMessage(ChordPanel.class, "ChordPanel.sus4Button.toolTipText")); // NOI18N
    sus4Button.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        sus4ButtonActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(add6Button, org.openide.util.NbBundle.getMessage(ChordPanel.class, "ChordPanel.add6Button.text")); // NOI18N
    add6Button.setToolTipText(org.openide.util.NbBundle.getMessage(ChordPanel.class, "ChordPanel.add6Button.toolTipText")); // NOI18N
    add6Button.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        add6ButtonActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(playButton, org.openide.util.NbBundle.getMessage(ChordPanel.class, "ChordPanel.playButton.text")); // NOI18N
    playButton.setToolTipText(org.openide.util.NbBundle.getMessage(ChordPanel.class, "ChordPanel.playButton.toolTipText")); // NOI18N
    playButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        playButtonActionPerformed(evt);
      }
    });

    org.openide.awt.Mnemonics.setLocalizedText(notesLabel, org.openide.util.NbBundle.getMessage(ChordPanel.class, "ChordPanel.notesLabel.text")); // NOI18N
    notesLabel.setToolTipText(org.openide.util.NbBundle.getMessage(ChordPanel.class, "ChordPanel.notesLabel.toolTipText")); // NOI18N

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(add2Button)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(add4Button)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(sus4Button)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(add6Button)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(playButton)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(notesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(layout.createSequentialGroup()
            .addComponent(rootCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(sharpFlatCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(triadCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(chordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addGap(0, 28, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(rootCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(sharpFlatCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(triadCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(chordLabel))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(add4Button)
          .addComponent(add2Button)
          .addComponent(add6Button)
          .addComponent(sus4Button))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(playButton)
          .addComponent(notesLabel)))
    );
  }// </editor-fold>//GEN-END:initComponents

  private void rootComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rootComboActionPerformed
    if (rootCombo.isFocusOwner()) {
      updateForm();
    }
  }//GEN-LAST:event_rootComboActionPerformed

  private void sharpFlatComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sharpFlatComboActionPerformed
    if (sharpFlatCombo.isFocusOwner()) {
      updateForm();
    }
  }//GEN-LAST:event_sharpFlatComboActionPerformed

  private void triadComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_triadComboActionPerformed
    if (triadCombo.isFocusOwner()) {
      updateForm();
    }
  }//GEN-LAST:event_triadComboActionPerformed

  private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
    player.play2(chord.getChordMask(), root.getNumber());
  }//GEN-LAST:event_playButtonActionPerformed

  private void add6ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add6ButtonActionPerformed
    if (add6Button.isFocusOwner()) {
      updateForm();
    }
  }//GEN-LAST:event_add6ButtonActionPerformed

  private void add4ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add4ButtonActionPerformed
    if (add4Button.isFocusOwner()) {
      updateForm();
    }
  }//GEN-LAST:event_add4ButtonActionPerformed

  private void add2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add2ButtonActionPerformed
    if (add2Button.isFocusOwner()) {
      updateForm();
    }
  }//GEN-LAST:event_add2ButtonActionPerformed

  private void sus4ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sus4ButtonActionPerformed
    if (sus4Button.isFocusOwner()) {
      updateForm();
    }
  }//GEN-LAST:event_sus4ButtonActionPerformed


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JRadioButton add2Button;
  private javax.swing.JRadioButton add4Button;
  private javax.swing.JRadioButton add6Button;
  private javax.swing.JLabel chordLabel;
  private javax.swing.JLabel notesLabel;
  private javax.swing.JButton playButton;
  private javax.swing.JComboBox<String> rootCombo;
  private javax.swing.JComboBox<String> sharpFlatCombo;
  private javax.swing.JRadioButton sus4Button;
  private javax.swing.JComboBox<String> triadCombo;
  // End of variables declaration//GEN-END:variables

}
